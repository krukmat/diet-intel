name: AI Code Review (Codex)

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

permissions:
  contents: read
  pull-requests: write

jobs:
  review:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Build unified diff
        id: diff
        run: |
          git fetch origin ${{ github.base_ref }} --depth=1
          git diff --unified=0 --no-color origin/${{ github.base_ref }}...HEAD > diff.patch
          echo "Bytes in diff:"
          wc -c diff.patch
          # Marca si el diff está vacío (opcional)
          if [ ! -s diff.patch ]; then
            echo "empty=true" >> "$GITHUB_OUTPUT"
          else
            echo "empty=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Generate AI review with Codex
        if: steps.diff.outputs.empty == 'false'
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          LC_ALL: C.UTF-8
        run: |
          # Construye el cuerpo JSON sin problemas de quoting/concatenación
          jq -n --rawfile diff diff.patch '
          {
            model: "gpt-5-codex-high",
            input: [
              {
                "role": "system",
                "content": "Actúa como revisor senior. Devuelve: 1) issues por severidad (Alta/Media/Baja) con file:line y motivo; 2) parches propuestos en diff unificado; 3) riesgos de regresión y tests faltantes; 4) marca ⚠️ si viola el DevSpec/scope. Sé conciso."
              },
              {
                "role": "user",
                "content": (
                  "Aquí está el diff unificado de la PR:\n```diff\n"
                  + $diff
                  + "\n```"
                )
              }
            ],
            temperature: 0,
            max_output_tokens: 16000
          }' > body.json

          # Llama a la Responses API y vuelca el informe
          curl -s https://api.openai.com/v1/responses \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "Content-Type: application/json" \
            -d @body.json \
          | jq -r '.output_text // .choices[0].message.content // .content[0].text // "No se recibió respuesta del modelo."' > review.md

          echo "=== Preview (primeras 40 líneas) ==="
          head -n 40 review.md || true

      - name: Post review as PR comment
        if: steps.diff.outputs.empty == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const body = fs.readFileSync('review.md','utf8');
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body
            });

      - name: Comment when no changes
        if: steps.diff.outputs.empty == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: "No hay cambios en el diff para revisar."
            });
