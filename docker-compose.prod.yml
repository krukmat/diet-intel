version: '3.8'

services:
  # PostgreSQL Database - Production
  db:
    image: postgres:15-alpine
    container_name: dietintel_postgres_prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-dietintel}
      POSTGRES_USER: ${POSTGRES_USER:-dietintel_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - dietintel_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-dietintel_user} -d ${POSTGRES_DB:-dietintel}"]
      interval: 30s
      timeout: 10s
      retries: 5
    # Don't expose port in production (internal access only)

  # Redis Cache - Production
  redis:
    image: redis:7-alpine
    container_name: dietintel_redis_prod
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_prod_data:/data
    networks:
      - dietintel_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    # Don't expose port in production (internal access only)

  # FastAPI Application - Production
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: dietintel_api_prod
    environment:
      # Database Configuration
      DATABASE_URL: postgresql://${POSTGRES_USER:-dietintel_user}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB:-dietintel}
      
      # Redis Configuration
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      REDIS_CACHE_TTL_HOURS: ${REDIS_CACHE_TTL_HOURS:-24}
      REDIS_MAX_CONNECTIONS: ${REDIS_MAX_CONNECTIONS:-20}
      
      # OpenFoodFacts API Configuration
      OFF_BASE_URL: ${OFF_BASE_URL:-https://world.openfoodfacts.org}
      OFF_TIMEOUT: ${OFF_TIMEOUT:-10.0}
      OFF_RATE_LIMIT_DELAY: ${OFF_RATE_LIMIT_DELAY:-0.2}
      OFF_MAX_RETRIES: ${OFF_MAX_RETRIES:-5}
      OFF_RETRY_DELAY: ${OFF_RETRY_DELAY:-2.0}
      
      # Application Configuration
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      ENVIRONMENT: production
      
      # Security
      SECRET_KEY: ${SECRET_KEY}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES:-60}
      
    ports:
      - "${API_PORT:-8000}:8000"
    networks:
      - dietintel_network
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      replicas: ${API_REPLICAS:-2}
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: dietintel_nginx
    volumes:
      - ./nginx/prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/ssl/certs:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - dietintel_network
    depends_on:
      - api
    restart: unless-stopped

volumes:
  postgres_prod_data:
    driver: local
  redis_prod_data:
    driver: local

networks:
  dietintel_network:
    driver: bridge